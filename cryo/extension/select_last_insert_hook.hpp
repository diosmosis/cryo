///////////////////////////////////////////////////////////////////////////////
//
//! \file select_last_insert_hook.hpp
//! Contains the \ref select_last_insert_hook<> type.
//
//  Copyright (c) 2010 dizzy
//
//  Distributed under the Boost Software License, Version 1.0. (See accompanying
//  file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//
///////////////////////////////////////////////////////////////////////////////

#if !defined( CRYO_EXTENSION_SELECT_LAST_INSERT_HOOK_HPP )
#define CRYO_EXTENSION_SELECT_LAST_INSERT_HOOK_HPP

#include <cryo/cryo_fwd.hpp>
#include <cryo/extension/last_insert_id_hook.hpp>
#include <cryo/relational/execute_scalar.hpp>
#include <sstream>

namespace cryo { namespace extension
{
    //! \brief Hook that retrieves the last generated value of type \c T using a
    //!        connection instance.
    //!
    //! The default implementation of this hook gets the last generated value by
    //! executing a query. If a backend has a faster way to access this data, such
    //! as through a function provided by the backend's client library, this hook
    //! can be specialized to provide a performance boost.
    //!
    //! Specializations of this type must provide the following operator:
    //! <tt>T operator()(Connection const&) const</tt>
    //! This operator must retrieve the last generated value of type \c T using
    //! the supplied connection.
    //!
    //! \tparam Connection the backend connection type.
    //! \tparam T the type of autogenerated value requested. Currently, cryo only
    //!           supports autogenerated integers.
    template <typename Connection, typename T>
    struct select_last_insert_hook
    {
        T operator()(Connection const& conn) const
        {
            std::stringstream ss;
            ss << "SELECT ";
            last_insert_id_hook<Connection>(ss);
            ss << ';';
            return (T)(execute_scalar(conn, ss.str()));
        }
    };
}}

#endif // #if !defined( CRYO_EXTENSION_SELECT_LAST_INSERT_HOOK_HPP )
